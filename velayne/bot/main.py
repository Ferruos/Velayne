import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand, BotCommandScopeDefault, Message, CallbackQuery
from velayne.infra.config import get_settings, is_sandbox_mode, toggle_sandbox_mode, reload_components
from velayne.bot.keyboards import main_menu, profile_menu, admin_menu, news_nav_menu
from velayne.infra.db import (
    get_last_trades,
    get_live_stats,
    get_user_sub_status,
    get_or_create_user,
    award_achievement,
    get_user_achievements,
    list_users
)
from velayne.core.ml import simulate_strategy_on_data, load_golden_dataset
from velayne.core.news import get_latest_news
settings = get_settings()

async def start_bot():
    TG_TOKEN = settings.TG_TOKEN
    if not TG_TOKEN:
        logging.warning("[–ë–û–¢] TG_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return None

    bot = Bot(
        TG_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()

    async def heartbeat():
        while True:
            logging.info("[–ë–û–¢] –±–æ—Ç –∂–∏–≤")
            await asyncio.sleep(30)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @dp.message(F.text == "/start")
    async def cmd_start(msg: Message):
        is_admin = str(msg.from_user.id) == str(settings.ADMIN_ID)
        await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Velayne!", reply_markup=main_menu(is_admin))

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Ñ–∏–ª—å"
    @dp.callback_query(F.data == "profile_menu")
    async def cb_profile(call: CallbackQuery):
        user = await get_or_create_user(call.from_user.id)
        st = await get_user_sub_status(call.from_user.id)
        achs = await get_user_achievements(user.id)
        achv_text = "üèÜ –ê—á–∏–≤–∫–∏:\n" + ("–ù–µ—Ç" if not achs else "\n".join(f"‚Ä¢ {a}" for a in achs))
        sub_text = f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {'–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ' + st['until'].strftime('%d.%m.%Y') if st['active'] else '–Ω–µ—Ç'}"
        await call.message.edit_text(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n{sub_text}\n{achv_text}",
            reply_markup=profile_menu()
        )
        await call.answer("–ü—Ä–æ—Ñ–∏–ª—å", show_alert=False)

    # –ö–Ω–æ–ø–∫–∞ "–ê—á–∏–≤–∫–∏"
    @dp.callback_query(F.data == "achievements_menu")
    async def cb_achievements(call: CallbackQuery):
        user = await get_or_create_user(call.from_user.id)
        achs = await get_user_achievements(user.id)
        text = "üèÜ –í–∞—à–∏ –∞—á–∏–≤–∫–∏:\n" + ("–ü–æ–∫–∞ –Ω–µ—Ç." if not achs else "\n".join(f"‚Ä¢ {a}" for a in achs))
        await call.message.edit_text(text, reply_markup=profile_menu())
        await call.answer("–ê—á–∏–≤–∫–∏", show_alert=False)

    # –ö–Ω–æ–ø–∫–∞ "–¢–æ—Ä–≥–æ–≤–ª—è"
    @dp.callback_query(F.data == "trade_menu")
    async def cb_trade(call: CallbackQuery):
        trades = await get_last_trades(5)
        stats = await get_live_stats()
        text = f"üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:</b>\n"
        for t in trades:
            text += f"{t['ts']} | {t['symbol']} | {t['side']} @ {t['price']:.2f} x {t['amount']:.6f}\n"
        text += f"\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\nPnL: {stats['pnl_abs']:.2f} ({stats['pnl_pct']:.2f}%)\nSharpe: {stats['sharpe']:.2f}\nMaxDD: {stats['maxdd']:.2f}%"
        await call.message.edit_text(text, reply_markup=main_menu(str(call.from_user.id) == str(settings.ADMIN_ID)))
        await call.answer("–¢–æ—Ä–≥–æ–≤–ª—è", show_alert=False)
        # Achievement: –ø–µ—Ä–≤—ã–π trade
        user = await get_or_create_user(call.from_user.id)
        if trades and await get_user_achievements(user.id) == []:
            await award_achievement(user.id, "–ü–µ—Ä–≤—ã–π —Ç—Ä–µ–π–¥")

    # –ö–Ω–æ–ø–∫–∞ "–û–±—É—á–µ–Ω–∏–µ"
    @dp.callback_query(F.data == "ml_menu")
    async def cb_ml(call: CallbackQuery):
        await call.answer("–û–±—É—á–µ–Ω–∏–µ", show_alert=False)
        df = load_golden_dataset()
        sim = simulate_strategy_on_data(df)
        text = f"ü§ñ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞!\nSharpe: {sim['sharpe']:.2f}\n"
        await call.message.edit_text(text, reply_markup=main_menu(str(call.from_user.id) == str(settings.ADMIN_ID)))

    # –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–æ—Å—Ç–∏"
    news_index = {}

    @dp.callback_query(F.data == "news_menu")
    async def cb_news(call: CallbackQuery):
        news = await get_latest_news(5)
        if not news:
            await call.message.edit_text("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.", reply_markup=news_nav_menu())
            await call.answer("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", show_alert=False)
            return
        news_index[call.from_user.id] = 0
        n = news[0]
        txt = f"<b>{n['title']}</b>\n{n['dt']}\n{n['link']}"
        await call.message.edit_text(txt, reply_markup=news_nav_menu())
        await call.answer("–ù–æ–≤–æ—Å—Ç–∏", show_alert=False)

    @dp.callback_query(F.data.in_(["news_next", "news_prev"]))
    async def cb_news_nav(call: CallbackQuery):
        news = await get_latest_news(5)
        idx = news_index.get(call.from_user.id, 0)
        if call.data == "news_next":
            idx = min(idx+1, len(news)-1)
        else:
            idx = max(idx-1, 0)
        news_index[call.from_user.id] = idx
        n = news[idx]
        txt = f"<b>{n['title']}</b>\n{n['dt']}\n{n['link']}"
        await call.message.edit_text(txt, reply_markup=news_nav_menu())
        await call.answer("", show_alert=False)

    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–ø–∏—Å–∫–∞"
    @dp.callback_query(F.data == "sub_menu")
    async def cb_sub(call: CallbackQuery):
        st = await get_user_sub_status(call.from_user.id)
        text = f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {'–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ' + st['until'].strftime('%d.%m.%Y') if st['active'] else '–Ω–µ—Ç'}"
        await call.message.edit_text(text, reply_markup=profile_menu())
        await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞", show_alert=False)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    @dp.callback_query(F.data == "settings_menu")
    async def cb_settings(call: CallbackQuery):
        await call.message.edit_text("üõ† –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_menu(str(call.from_user.id) == str(settings.ADMIN_ID)))
        await call.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=False)

    # –ê–¥–º–∏–Ω –º–µ–Ω—é
    @dp.callback_query(F.data == "admin_menu")
    async def cb_admin(call: CallbackQuery):
        await call.message.edit_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())
        await call.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", show_alert=False)

    @dp.callback_query(F.data == "admin_restart")
    async def cb_admin_restart(call: CallbackQuery):
        reload_components()
        await call.message.edit_text("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã.", reply_markup=admin_menu())
        await call.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", show_alert=False)

    @dp.callback_query(F.data == "admin_toggle_mode")
    async def cb_admin_toggle(call: CallbackQuery):
        new_mode = toggle_sandbox_mode()
        await call.message.edit_text(f"–†–µ–∂–∏–º —Å–µ—Ä–≤–∏—Å–æ–≤: {'Sandbox' if new_mode else 'Live'}", reply_markup=admin_menu())
        await call.answer("–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω", show_alert=False)

    @dp.callback_query(F.data == "admin_user_stats")
    async def cb_admin_stats(call: CallbackQuery):
        users = await list_users(10)
        text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(f"{u['tg_id']}: {u['sub_until']}" for u in users)
        await call.message.edit_text(text, reply_markup=admin_menu())
        await call.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=False)

    # –ù–∞–∑–∞–¥
    @dp.callback_query(F.data == "main_menu")
    async def cb_main_menu(call: CallbackQuery):
        is_admin = str(call.from_user.id) == str(settings.ADMIN_ID)
        await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(is_admin))
        await call.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", show_alert=False)

    # –ù–∞–∑–∞–¥ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    @dp.callback_query(F.data == "profile_menu")
    async def cb_profile_menu(call: CallbackQuery):
        is_admin = str(call.from_user.id) == str(settings.ADMIN_ID)
        await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(is_admin))
        await call.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", show_alert=False)

    # Heartbeat task
    asyncio.create_task(heartbeat())

    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
        BotCommand(command="help",  description="–°–ø—Ä–∞–≤–∫–∞"),
    ], scope=BotCommandScopeDefault())

    logging.info("[–ë–û–¢] –ú–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    me = await bot.get_me()
    logging.info(f"[–ë–û–¢] –û–Ω–ª–∞–π–Ω –∫–∞–∫ @{me.username} (id={me.id})")

    try:
        await dp.start_polling(bot, allowed_updates=None)
    except Exception as e:
        logging.error(f"[–ë–û–¢] Polling –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω: {e}")
        raise