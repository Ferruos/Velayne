import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from velayne.infra.config import settings
from velayne.infra.db import (
    set_global_mode,
    get_global_mode,
    get_users_count,
    get_or_create_user,
    get_user_active_subscription,
    SessionLocal,
    User,
    Subscription
)
from velayne.core.ml import train_meta_model, load_golden_dataset

router = Router(name="admin")

admin_menu = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚öôÔ∏è –†–µ–∂–∏–º: Sandbox/Live", callback_data="switch_mode"),
        InlineKeyboardButton(text="üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="train_model"),
    ],
    [
        InlineKeyboardButton(text="üìä Dataset info", callback_data="dataset_info"),
        InlineKeyboardButton(text="üìë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users_list"),
    ],
])

@router.callback_query(F.data == "switch_mode")
async def switch_mode(call: CallbackQuery):
    if not settings.ADMIN_ID or str(call.from_user.id) != str(settings.ADMIN_ID):
        await call.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    mode = get_global_mode()
    new_mode = "live" if mode == "sandbox" else "sandbox"
    set_global_mode(new_mode)
    await call.message.answer(f"–†–µ–∂–∏–º —Ç–µ–ø–µ—Ä—å: {new_mode.upper()}", reply_markup=admin_menu)
    await call.bot.send_message(settings.ADMIN_ID, f"[–†–ï–ñ–ò–ú] –ê–¥–º–∏–Ω –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º –Ω–∞ {new_mode.upper()}.")
    logging.info(f"[ADMIN] –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {new_mode}")

@router.callback_query(F.data == "train_model")
async def admin_train_model(call: CallbackQuery):
    try:
        df = load_golden_dataset()
        meta = train_meta_model(df)
        text = (
            f"–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"–¢–æ—á–Ω–æ—Å—Ç—å: {meta['acc']:.3f}\n"
            f"–ü—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(meta['features'])}"
        )
        await call.message.answer(text, reply_markup=admin_menu)
        await call.bot.send_message(settings.ADMIN_ID, f"[–û–ë–£–ß–ï–ù–ò–ï] –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞, acc={meta['acc']:.3f}")
        logging.info(f"[ADMIN] –û–±—É—á–µ–Ω–∞ –º–æ–¥–µ–ª—å (acc={meta['acc']:.3f})")
    except Exception as e:
        logging.error(f"[ADMIN] –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await call.message.answer("–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è.", reply_markup=admin_menu)

@router.callback_query(F.data == "dataset_info")
async def dataset_info(call: CallbackQuery):
    try:
        df = load_golden_dataset()
        text = f"üìä –î–∞—Ç–∞c–µ—Ç: {len(df)} –±–∞—Ä–æ–≤, –ø—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(df.columns)}"
        await call.message.answer(text, reply_markup=admin_menu)
    except Exception as e:
        logging.error(f"[ADMIN] –û—à–∏–±–∫–∞ dataset_info: {e}")
        await call.message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=admin_menu)

@router.callback_query(F.data == "users_list")
async def users_list(call: CallbackQuery):
    try:
        # –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫
        with SessionLocal() as session:
            users = session.query(User).all()
            subs = {s.user_id: s for s in session.query(Subscription).all()}
        lines = ["<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>"]
        for u in users:
            sub = subs.get(u.id)
            sub_info = f"{sub.status} –¥–æ {sub.expires_at.strftime('%d.%m.%Y')}" if sub else "–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            lines.append(f"{u.tg_id} ({u.role}): {sub_info}")
        await call.message.answer("\n".join(lines), reply_markup=admin_menu)
    except Exception as e:
        logging.error(f"[ADMIN] –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await call.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=admin_menu)