import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from velayne.infra.config import settings
from velayne.infra.db import (
    get_or_create_user,
    get_user_active_subscription,
)
from velayne.core.ml import simulate_strategy_on_data, load_golden_dataset
from velayne.bot.texts_ru import SUBSCRIPTION_STATUS, ERROR_GENERIC
from velayne.bot.news_cache import news_cache  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ news_cache —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω

router = Router(name="user")

main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="sub_status")],
    [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")],
    [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
])

@router.message(F.text == "/start")
async def start_handler(msg: Message):
    is_admin = str(msg.from_user.id) == str(settings.ADMIN_ID)
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

@router.callback_query(F.data == "sub_status")
async def sub_status(call: CallbackQuery):
    try:
        user = get_or_create_user(call.from_user.id)
        sub = get_user_active_subscription(user.id)
        if sub:
            await call.message.answer(
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {sub.expires_at.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=main_menu
            )
        else:
            await call.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=main_menu)
    except Exception as e:
        logging.error(f"[USER] –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await call.message.answer(ERROR_GENERIC, reply_markup=main_menu)

@router.callback_query(F.data == "news")
async def news(call: CallbackQuery):
    try:
        news_list = news_cache.get_latest(5)  # news_cache –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å get_latest
        if not news_list:
            await call.message.answer("–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.", reply_markup=main_menu)
            return
        text = "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏:</b>\n"
        for n in news_list:
            text += f"‚Ä¢ <b>{n['title']}</b>\n{n['link']}\n"
        await call.message.answer(text, reply_markup=main_menu)
        # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∞–¥–º–∏–Ω—É
        await call.bot.send_message(settings.ADMIN_ID, f"[–ù–û–í–û–°–¢–ò] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ—Å—Ç–∏.")
    except Exception as e:
        logging.error(f"[USER] –û—à–∏–±–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await call.message.answer(ERROR_GENERIC, reply_markup=main_menu)

@router.callback_query(F.data == "stats")
async def stats(call: CallbackQuery):
    try:
        df = load_golden_dataset()
        sim = simulate_strategy_on_data(df)
        text = (
            f"üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"PnL: {sim['net_pnl']:.2f}\n"
            f"–°–¥–µ–ª–æ–∫: {sim['trades']}\n"
            f"Sharpe: {sim['sharpe']:.2f}\n"
        )
        await call.message.answer(text, reply_markup=main_menu)
        # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∞–¥–º–∏–Ω—É
        await call.bot.send_message(settings.ADMIN_ID, f"[–°–¢–ê–¢–ò–°–¢–ò–ö–ê] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    except Exception as e:
        logging.error(f"[USER] –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await call.message.answer(ERROR_GENERIC, reply_markup=main_menu)