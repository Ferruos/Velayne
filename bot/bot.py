import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "8291187695:AAFpr46bqQ4cJg_JVfPDoQxQkMM09mzDKTg"
ADMIN_ID = 760374544

def escape_md(text: str) -> str:
    for c in r"\_*[]()~`>#+-=|{}.!":
        text = text.replace(c, '\\' + c)
    return text

bot = Bot(token=TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)

def is_admin(user_id):
    return user_id == ADMIN_ID

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("/sandbox_run"), KeyboardButton("/sandbox_stop"))
    kb.add(KeyboardButton("/blend_status"), KeyboardButton("/train_blend"))
    kb.add(KeyboardButton("/analytics"), KeyboardButton("/mode"))
    if is_admin(message.from_user.id):
        kb.add(KeyboardButton("/admin"))
    await message.reply(
        escape_md("*Velayne*: _–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!_\\n–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É üëá"),
        reply_markup=kb
    )

@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply(escape_md("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."))
        return
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚ñ∂Ô∏è Sandbox Run", callback_data="sandbox_run"),
        InlineKeyboardButton("‚èπÔ∏è Sandbox Stop", callback_data="sandbox_stop"),
        InlineKeyboardButton("üß† –û–±—É—á–∏—Ç—å Blend", callback_data="train_blend"),
        InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics"),
    )
    kb.add(InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º", callback_data="mode"))
    await message.reply(
        escape_md("üõ† *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å* ‚Äî –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data in ["sandbox_run", "sandbox_stop", "train_blend", "analytics", "mode"])
async def admin_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    if call.data == "sandbox_run":
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ sandbox-–≤–æ—Ä–∫–µ—Ä–∞. –ó–¥–µ—Å—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
        # import subprocess; subprocess.Popen(["python", "workers/worker.py", str(call.from_user.id), "sandbox"])
        await call.message.reply(escape_md("‚ñ∂Ô∏è Sandbox-–≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω!"))
    elif call.data == "sandbox_stop":
        await call.message.reply(escape_md("‚èπÔ∏è Sandbox-–≤–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏ –≤—Ä—É—á–Ω—É—é)."))
    elif call.data == "train_blend":
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è blend. –ó–¥–µ—Å—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
        # import subprocess; subprocess.Popen(["python", "master/master.py"])
        await call.message.reply(escape_md("üß† –û–±—É—á–µ–Ω–∏–µ Blend –∑–∞–ø—É—â–µ–Ω–æ!"))
    elif call.data == "analytics":
        await call.message.reply(escape_md("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ blend/—Ç–æ—Ä–≥–æ–≤–ª–∏."))
    elif call.data == "mode":
        await call.message.reply(escape_md("‚öôÔ∏è –°–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ sandbox —Ä–µ–∂–∏–º."))

@dp.message_handler(commands=["sandbox_run"])
async def sandbox_run_cmd(message: types.Message):
    await message.reply(escape_md("‚ñ∂Ô∏è Sandbox-–≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω!"))

@dp.message_handler(commands=["sandbox_stop"])
async def sandbox_stop_cmd(message: types.Message):
    await message.reply(escape_md("‚èπÔ∏è Sandbox-–≤–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏ –≤—Ä—É—á–Ω—É—é)."))

@dp.message_handler(commands=["train_blend"])
async def train_blend_cmd(message: types.Message):
    await message.reply(escape_md("üß† –û–±—É—á–µ–Ω–∏–µ Blend –∑–∞–ø—É—â–µ–Ω–æ!"))

@dp.message_handler(commands=["blend_status"])
async def blend_status_cmd(message: types.Message):
    await message.reply(escape_md("üìà Blend –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è blend-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞."))

@dp.message_handler(commands=["analytics"])
async def analytics_cmd(message: types.Message):
    await message.reply(escape_md("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏."))

@dp.message_handler(commands=["mode"])
async def mode_cmd(message: types.Message):
    await message.reply(escape_md("‚öôÔ∏è –°–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ sandbox —Ä–µ–∂–∏–º."))

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)