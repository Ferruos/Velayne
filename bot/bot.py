import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from services.env import get_env

TOKEN = get_env("TG_TOKEN")
ADMIN_ID = int(get_env("ADMIN_ID", "0"))

bot = Bot(token=TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)

def is_admin(user_id):
    return user_id == ADMIN_ID

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for cmd in ["/pay", "/status", "/run", "/stop", "/report", "/risk", "/mode"]:
        kb.add(KeyboardButton(cmd))
    if is_admin(message.from_user.id):
        kb.add(KeyboardButton("/admin"))
    await message.reply(
        "*Velayne*: _–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!_\n–ñ–º–∏ /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
        reply_markup=kb
    )

@dp.message_handler(commands=["help"])
async def help_cmd(message: types.Message):
    text = (
        "‚ú® *–ö–æ–º–∞–Ω–¥—ã*\n"
        "/pay ‚Äî –æ–ø–ª–∞—Ç–∞\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å\n"
        "/run ‚Äî –∑–∞–ø—É—Å–∫\n"
        "/stop ‚Äî —Å—Ç–æ–ø\n"
        "/report ‚Äî üìà –æ—Ç—á–µ—Ç\n"
        "/risk ‚Äî ‚ö°Ô∏è —Ä–∏—Å–∫–∏\n"
        "/mode ‚Äî —Ä–µ–∂–∏–º\n"
    )
    if is_admin(message.from_user.id):
        text += "\n*–ê–¥–º–∏–Ω:*\n/admin ‚Äî –ø–∞–Ω–µ–ª—å"
    await message.reply(text)

@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üöÄ –û–±—É—á–µ–Ω–∏–µ", callback_data="train"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å blend", callback_data="blend_update"),
    )
    kb.add(
        InlineKeyboardButton("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="setmode"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
    )
    await message.reply("üõ† *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data in ["train", "blend_update", "setmode", "status"])
async def admin_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    if call.data == "train":
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –∏ –≤—ã–∑–æ–≤–∏ –æ–±—É—á–µ–Ω–∏–µ
        from master.master import admin_train_blend
        await call.message.reply("üß† –û–±—É—á–µ–Ω–∏–µ blend –∏ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—â–µ–Ω–æ!")
        admin_train_blend()
    elif call.data == "blend_update":
        await call.message.reply("üîÑ Blend –æ–±–Ω–æ–≤–ª–µ–Ω!")
    elif call.data == "setmode":
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton("Sandbox", callback_data="mode_sandbox"),
            InlineKeyboardButton("Live", callback_data="mode_live"),
        )
        await call.message.reply("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=kb)
    elif call.data == "status":
        await call.message.reply("üí° –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")

@dp.callback_query_handler(lambda c: c.data.startswith("mode_"))
async def mode_cb(call: types.CallbackQuery):
    mode = call.data.split("_", 1)[1]
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª
    await call.message.reply(f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *{mode}*")

def main():
    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    main()