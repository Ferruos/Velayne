import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from services.env import get_env
from services.payments import create_payment, check_yoomoney_payment, is_user_paid
from services.keys import add_api_key, get_keys_info
from services.analytics import get_full_analytics
from services.settings import set_mode, get_mode
from bot.utils import escape_md
import logging
import pandas as pd

TOKEN = get_env("TG_TOKEN")
ADMIN_ID = int(get_env("ADMIN_ID", "0"))

bot = Bot(token=TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

def is_admin(user_id):
    return user_id == ADMIN_ID

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for cmd in ["/pay", "/status", "/run", "/stop", "/report", "/risk", "/mode"]:
        kb.add(KeyboardButton(cmd))
    if is_admin(message.from_user.id):
        kb.add(KeyboardButton("/admin"))
    await message.reply(
        escape_md("*Velayne*: _–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!_\n–ñ–º–∏ /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"),
        reply_markup=kb
    )

@dp.message_handler(commands=["help"])
async def help_cmd(message: types.Message):
    text = (
        "‚ú® *–ö–æ–º–∞–Ω–¥—ã*\n"
        "/pay ‚Äî –æ–ø–ª–∞—Ç–∞\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å\n"
        "/run ‚Äî –∑–∞–ø—É—Å–∫\n"
        "/stop ‚Äî —Å—Ç–æ–ø\n"
        "/report ‚Äî üìù –æ—Ç—á–µ—Ç\n"
        "/risk ‚Äî ‚ö°Ô∏è —Ä–∏—Å–∫–∏\n"
        "/mode ‚Äî —Ä–µ–∂–∏–º\n"
        "\n*–ê–¥–º–∏–Ω:*\n/admin ‚Äî –ø–∞–Ω–µ–ª—å"
    )
    await message.reply(escape_md(text))

@dp.message_handler(commands=["pay"])
async def pay_cmd(message: types.Message):
    payment_id = create_payment(message.from_user.id, 990, "RUB")
    await message.reply(
        escape_md(
            f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–≤–µ–¥–∏ 990 RUB –Ω–∞ YooMoney `41001234567890`.\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å —á–µ–∫ –∏–ª–∏ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
            f"–¢–≤–æ–π ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`"
        )
    )

@dp.message_handler(commands=["status"])
async def status_cmd(message: types.Message):
    paid = is_user_paid(message.from_user.id)
    msg = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!" if paid else "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã."
    await message.reply(escape_md(msg))

@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply(escape_md("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."))
        return
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üöÄ –û–±—É—á–∏—Ç—å", callback_data="train"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å blend", callback_data="blend_update"),
        InlineKeyboardButton("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="setmode"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
        InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics"),
        InlineKeyboardButton("üîë –ö–ª—é—á–∏", callback_data="keys"),
    )
    await message.reply(escape_md("üõ† *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å* ‚Äî –≤—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:"), reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data in [
    "train", "blend_update", "setmode", "status", "analytics", "keys"])
async def admin_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    if call.data == "train":
        import subprocess
        subprocess.Popen(["python", "master/master.py"])
        await call.message.reply(escape_md("üß† –û–±—É—á–µ–Ω–∏–µ blend –∏ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—â–µ–Ω–æ!"))
    elif call.data == "blend_update":
        await call.message.reply(escape_md("üîÑ Blend –æ–±–Ω–æ–≤–ª–µ–Ω!"))
    elif call.data == "setmode":
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton("Sandbox", callback_data="mode_sandbox"),
            InlineKeyboardButton("Live", callback_data="mode_live"),
        )
        await call.message.reply(escape_md("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:"), reply_markup=kb)
    elif call.data == "status":
        # –î–æ–±–∞–≤—å—Ç–µ get_full_status –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await call.message.reply(escape_md("üí° *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\nOK"))
    elif call.data == "analytics":
        analytics = get_full_analytics()
        await call.message.reply(escape_md(f"üìà *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:*\n{analytics}"))
    elif call.data == "keys":
        keys_info = get_keys_info(call.from_user.id)
        await call.message.reply(escape_md(f"üîë *API-–∫–ª—é—á–∏:*\n{keys_info}"))

@dp.callback_query_handler(lambda c: c.data.startswith("mode_"))
async def mode_cb(call: types.CallbackQuery):
    mode = call.data.split("_", 1)[1]
    set_mode(mode)
    await call.message.reply(escape_md(f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *{mode}*"))

@dp.message_handler(commands=["run"])
async def run_cmd(message: types.Message):
    mode = get_mode()
    if mode == "live" and not is_user_paid(message.from_user.id):
        await message.reply(escape_md("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω."))
        return
    import subprocess
    subprocess.Popen(["python", "workers/worker.py", str(message.from_user.id), mode])
    await message.reply(escape_md("‚è≥ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏..."))

@dp.message_handler(commands=["stop"])
async def stop_cmd(message: types.Message):
    await message.reply(escape_md("‚èπÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."))

@dp.message_handler(commands=["report"])
async def report_cmd(message: types.Message):
    if os.path.exists("last_report.png"):
        with open("last_report.png", "rb") as f:
            await message.reply_photo(f, caption=escape_md("–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç"))
    else:
        await message.reply(escape_md("–ù–µ—Ç –æ—Ç—á—ë—Ç–∞."))

@dp.message_handler(commands=["risk"])
async def risk_cmd(message: types.Message):
    if os.path.exists("risk_profile.csv"):
        stats = pd.read_csv("risk_profile.csv").tail(1).to_dict("records")[0]
        await message.reply(escape_md(
            f"–†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: {stats['profile']}\nDrawdown: {stats['drawdown']}%\nLeverage: x{stats['leverage']}"
        ))
    else:
        await message.reply(escape_md("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∏—Å–∫–∞–º."))

@dp.message_handler(commands=["mode"])
async def mode_cmd(message: types.Message):
    mode = get_mode()
    await message.reply(escape_md(f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *{mode}*"))

def main():
    from storage.db import init_db
    init_db()
    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    main()